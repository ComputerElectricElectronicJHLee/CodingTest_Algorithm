def solution(play_time, adv_time, logs):
    play_time = strTimeToInt(play_time)
    adv_time = strTimeToInt(adv_time)
    total_play = [0] * (play_time+1) #총 시간을 초 단위로 나열
    
    #시작시간 위치에 +1 끝나는 시간 위치에 -1을 한다
    for l in logs:
        start,end = l.split("-")
        start = strTimeToInt(start)
        end = strTimeToInt(end)
        total_play[start] += 1
        total_play[end] -= 1
    
    #시작시간이 +1 끝나는 시간이 -1 이므로 시작하는 프로그램을 만나면 +1 프로그램 하나가 끝나면 -1이 된다.
    #그러므로 시청중인 시청자 수가 계산됨
    for i in range(1, play_time+1):
        total_play[i] = total_play[i]+total_play[i-1]
    
    #위 과정을 한번 더 하면 시청자수에 영향받는 누적된 시청시간이 됨
    for i in range(1, play_time+1):
        total_play[i] = total_play[i]+total_play[i-1]
    
    #광고 종료 시점~광고 시작 시점 구간에서 가장 많이 누적된 시청시간 증가폭이 있으면
    #그 시점이 광고 시작 시점
    most_viewers = total_play[adv_time-1] #광고 넣을 시점 전 최대 누적 시청시간
    adv_start = 0
    for i in range(adv_time,play_time+1):
        if most_viewers < total_play[i] - total_play[i-adv_time]:
            most_viewers = total_play[i] - total_play[i-adv_time]
            adv_start = i-adv_time+1
    
    return intToStrTime(adv_start)


#시간을 모두 초로 환산한다.
def strTimeToInt(time):
    time = time.split(':')
    return int(time[0])*3600+int(time[1])*60+int(time[2])

#초로 환산된 숫자를 시간(시분초)으로 변경한다.
def intToStrTime(time_int):
    h = time_int // 3600
    h = '0'+str(h) if h < 10 else str(h)
    time_int = time_int % 3600
    
    m = time_int // 60
    m = '0'+str(m) if m < 10 else str(m)
    time_int = time_int % 60
    
    s = '0'+str(time_int) if time_int < 10 else str(time_int)
    return ":".join([h,m,s])